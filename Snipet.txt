{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"1": {
		"prefix": "cp",
		"body": [
		  "#include<bits/stdc++.h>",
		  "using namespace std;",
		  "int main()",
		  "{",
		  "    $0",
		  "    return 0;",
		  "}"
		],
		"description": ""
	  },
	  "2": {
		"prefix": "nd",
		"body": [
		  "class Node{",
		  "    public:",
		  "        int val;",
		  "        Node *next;",
		  "        Node(int vl)",
		  "        {",
		  "            this->val = vl;",
		  "            this->next = NULL;",
		  "        }",
		  "};"
		],
		"description": ""
	  },
	  "3": {
		"prefix": "bnd",
		"body": [
		  "class Node",
		  "{",
		  "    public:",
		  "        int val;",
		  "        Node *left;",
		  "        Node *right;",
		  "    Node(int val)",
		  "    {",
		  "        this->val = val;",
		  "        this->left = NULL;",
		  "        this->right = NULL;",
		  "    }",
		  "};"
		],
		"description": ""
	  },
	  "4": {
		"prefix": "dsus",
		"body": [
			"const int N = 1e5+5;",
		  "int parent[N];",
		  "int parentSize[N];",
		  "void dsu_set(int n)",
		  "{",
		  "    for(int i=1; i<=n; i++)",
		  "    {",
		  "        parent[i] = -1;",
		  "        parentSize[i] = 1;",
		  "    }",
		  "}",
		  "",
		  "int dsu_find(int node)",
		  "{",
		  "    while(parent[node] != -1)",
		  "    {",
		  "        node = parent[node];",
		  "    }",
		  "    return node;",
		  "}",
		  "",
		  "void dsu_union(int a, int b)",
		  "{",
		  "    int leaderA = dsu_find(a);",
		  "    int leaderB = dsu_find(b);",
		  "    if(leaderA != leaderB)",
		  "    {",
		  "        if(parentSize[leaderA] > parentSize[leaderB])",
		  "        {",
		  "            parent[leaderB] = leaderA; // leader is a",
		  "            parentSize[leaderA] += parentSize[leaderB];",
		  "",
		  "        }",
		  "        else",
		  "        {",
		  "            parent[leaderA] = leaderB; // leader is b",
		  "            parentSize[leaderB] += parentSize[leaderA];",
		  "        }",
		  "    }",
		  "}"
		],
		"description": ""
	  },
	  "5": {
		"prefix": "dsur",
		"body": [
		  "const int N = 1e5+5;",
		  "int parent[N];",
		  "int parentLevel[N];",
		  "void dsu_set(int n)",
		  "{",
		  "    for(int i=1; i<=n; i++)",
		  "    {",
		  "        parent[i] = -1;",
		  "        parentLevel[i] = 0;",
		  "        ",
		  "    }",
		  "}",
		  "",
		  "int dsu_find(int node)",
		  "{",
		  "    while(parent[node] != -1)",
		  "    {",
		  "        node = parent[node];",
		  "    }",
		  "    return node;",
		  "}",
		  "",
		  "void dsu_union(int a, int b)",
		  "{",
		  "    int leaderA = dsu_find(a);",
		  "    int leaderB = dsu_find(b);",
		  "    if(leaderA != leaderB)",
		  "    {",
		  "        if(parentLevel[leaderA] > parentLevel[leaderB])",
		  "        {",
		  "            parent[leaderB] = leaderA;",
		  "        }",
		  "        else if(parentLevel[leaderB] > parentLevel[leaderA])",
		  "        {",
		  "            parent[leaderA] = leaderB;",
		  "        }",
		  "        else",
		  "        {",
		  "           // akta korlei hobe",
		  "           parent[leaderB] = leaderA;",
		  "           parentLevel[leaderA]++; ",
		  "        }",
		  "    }",
		  "}"
		],
		"description": ""
	  }

}